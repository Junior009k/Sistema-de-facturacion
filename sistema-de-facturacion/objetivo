Buenas mi nombre es Junior Rafael Aquino De Leon y esto es una prueba tecnica, 

tengo 7 dias para realizar un sistema de facturacion que utilice crud 

para ello decidiremos como lo haremos.

la interfaz grafica tenia pensado descargar una plantilla de facturacion para asi hacer mas enfasis en el backend 

pero me descarte la idea ya que quiero que observen mis grandiosas habilidades con el css(que son casi nulas xd)

otra pregunta es que si comenzaria por el frontend o el backend, he decidido comenzar con el backend, modelar los datos 


otra cuestion aparecio , hare mi proyecto utilizando mySQL(no me gusta mucho la idea) o firebase, 
empezare el modelado utilizando workbench, desarrolle el modelado en mi tiempo libre sera facil recrearlo 

ya para comenzar el proyecto contara de 3 partes 

1ra etapa-Desarrollo del backend 
2da etapa-Desarrollo del frontend 
3ra etapa-conexion del frontend con el backend 

planificacion 
vamos a crear la tabla de 

Factura
  `id` INT NOT NULL,
  `monto` VARCHAR(45) NULL,
  `fecha` VARCHAR(45) NULL,
  `Cliente_id` INT NOT NULL,
  `Empleado_id` INT NOT NULL,
  `cantidadid?` INT NOT NULL,
cliente 
  `id` INT NOT NULL,
  `nombre` VARCHAR(45) NULL,
  `apellido` VARCHAR(45) NULL,
empleado 
    `id` INT NOT NULL,
  `nombre` VARCHAR(45) NULL,
  `apellido` VARCHAR(45) NULL,
producto 
   id` INT NOT NULL,
  `nombre` VARCHAR(45) NULL,
  `descripcion` VARCHAR(45) NULL,
  `precio` VARCHAR(45) NULL,

  esto seran los datos que manejaremos por el momento
------------------------------------------

1ra etapa-Desarrollo del backend

-vamos a desarrollar el modelados de datos

Este sera nuesto diagrama lo hice con poco campos para hacerlo lo mas simple posible 
ahora generaremos el archivo sql

tenemos nuestra base de datos creada

ahora comenzaremos un poco a darle diseño a nuestro frontend

continuamos desde esta parte, vamos a configurar nuestro firebase

una vez configurado crearemos nuestra base de datos correspondiente
en lo que se va descargando firebase. vamos al frontend

vamos a firebase hacer una prueba,

por ahora vamos a crear estas 4 tablas pra hacer el desarrollo mas simple y terminar a tiempo

tanto el monto 
como el total , lo voy a calcular desde react 
para simplificar el proceso 

cargaremos los datos y los primeros datos que cargaremos sera los del producto 
2da etapa-Desarrollo del frontend 

Nuestro frontend 

estara compuesto por 6 ventana 

-Index 
-Facturacion
es donde se generara la factura
-Cliente
-Empleado
-Inventario
-Configuracion de usuario 

por ahora lo que haremos sera trabajar con el index 

me voy a inspirar de ese diseño para comenzar con el mio 

si es un sistema de facturacion es facil innovare un poco pero primero creare la barra del menu

asi que vamos a usar una de la caracteristica de react, que es el uso de componentes 


las rutas que haremos sera 

index

Introduccion 


aqui vamos a utilizar route para definir las rutas

vamos a probar el funcionamiento de cada ruta
pero comenzaremos con la 

ya direcciona ahora vamos a darle estilo

3ra etapa-conexion del frontend con el backend 

esta conexion, esta en el firebase.js 

vamos a obtener nuestra basedatos 
y utilizaremos los modulos que creamos 
index.jsx 
facturacion.jsx 
cliente.jsx
empleado.jsx 
inventario.jsx

ya descargue la dependencia de firebase ahora toca cargar los datos que tenemos alojado eh igresarlo en 
nuestras tabla , primero comenzare con inventario

ahora vamos a realizar la conexion de todos 



//////////////////////////////////////////////////////////
NOTAS DE INTERES 

Actualmente estoy planificando como sera mi proyecto
cogi este dia para realizar esto, mi cronograma es el siguiente 

Dia 3= configurar las rutas y crear las tablas(LISTO)
Dia 4= configurar firebase y poder crear , leer , actualizar y borrar los datos 
Dia 5=Trabajar con la conexion de front end y backend
Dia 6= Trabajar con el modulo configuracion y crear un login 
Dia 7= Refinar el codigo, agregarle alguna caracteristica y usar el dia para solucionar cualquier actividad pendiente



////////////////////////////////////////////////////////////////////////////
EXTRA

/*
const obtenerElementos = (c)=>
{
  c=c*4
  let a=0;
  let item=[]
  item.push( <div className='item'></div>)
  for(let i=0;i<c;++i){   
    item.push( <div className='item'></div>)
    ++a;
    if(a===4){
        item.push( <div className='item'>Editar|Borrar </div>)
        a=0}

    }
    console.log(item)
  return item;
}*/

///////////////////////
import 'bootstrap/dist/css/bootstrap.min.css';
import {Link} from "react-router-dom";
import Swal from "sweetalert2";
import React, { useState } from 'react';
import Button from 'react-bootstrap/Button';
import Modal from 'react-bootstrap/Modal';
import  './inventario.css'
import { collection, query, getDocs,doc,addDoc,deleteDoc,updateDoc } from "firebase/firestore";
import { db } from "../firebase";

 
let item=[]   //este elemento es para almacenar los datos que se cargan en formato html tag
let a=0;      //esta variable, me auxiliar en algunas partes

//=====================================================CRUD INVENTARIO START===========================================//
//Create:Crea los campos  
const Agregar=(nombre,descripcion, precio)=>
  {
    
    //validacion de los campos
   if(nombre!=="" && descripcion!=="" && precio!=="")
   {
    a=a+1;
      addDoc(collection(db, "Producto"), {
      id:a,
      nombre: nombre,
      descripcion: descripcion,
      precio:precio
    });
    Swal.fire(
      'Good job!',
      'El producto ha sido agregado',
      'success'
    )
   }
    

  }

//Read: este el que lee los datos de la base de datos y carga la informacion
  async  function cargarDatos()
  
//Update: actualiza los datos de la tabla inventario
  const actualizar=(e,id,nombre, descripcion, precio)=>
  {
     Swal.fire({
      title: '<strong>Actualizar</u></strong>',
      icon: 'info',
      html:
        'nombre <input type="text" id="nombre"  value='+nombre+'></input><br> '+
        'descripcion<input type="text" id="descripcion"  value='+descripcion+'></input> <br>'+
        'precio<input type="text" id="precio" value='+precio+'></input> ',
        confirmButtonText: 'Actualizar',
        denyButtonText: `no Actualizar`,
      }).then((result) => {
        /* Read more about isConfirmed, isDenied below */
        if (result.isConfirmed) {
          const actualizacionRef = doc(db, "Producto", e.target.value);

            updateDoc(actualizacionRef, {
            nombre:document.getElementById('nombre').value,
            descripcion:document.getElementById('descripcion').value,
            precio:document.getElementById('precio').value,
          });
        } else if (result.isDenied) {
          Swal.fire('Changes are not saved', '', 'info')
        }
      })
  }
//DELETE: elimina los datos de la tabla inventario
  const eliminar=(e,nombre)=>
  {
    Swal.fire({
      title: 'Estas seguro de eliminar '+nombre+'?',
      text: "Tu accion no sera reversible",
      icon: 'Advertencia',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Si,Borralo!'
    }).then((result) => {
      if (result.isConfirmed) 
      {
        deleteDoc(doc(db,'Producto', e.target.value))
        Swal.fire(
          'El campo ha sido borrado',
          'success'
        )
      }
    })
  }
 
{
  //declaro mi query
  const q = query(collection(db, "Producto"));
  //esta es la que se encargara de ejecutar el query como si fuera una promesas
  const querySnapshot = getDocs(q);
  querySnapshot.then((querySnapshot) => 
  {
    let i=0;
   
    querySnapshot.forEach((doc) => 
    {
      
     
      item.push( <div className='item' type="text">{doc.data().id}</div>)
      item.push( <div className='item'>{doc.data().nombre}</div>)
      item.push( <div className='item'>{doc.data().descripcion}</div>)
      item.push( <div className='item'>{doc.data().precio}</div>)
      item.push( <div className='item'><button  className="botonC" value={doc.id} onClick={(e)=>{actualizar(e,doc.data().id,doc.data().nombre,doc.data().descripcion,doc.data().precio)}} >Actualizar</button>|<button className="botonC E" value={doc.id} onClick={(e)=>eliminar(e,doc.data().nombre)} >Eliminar</button></div>)
     
      
      console.log(`${doc.id} => ${doc.data().nombre}`);
      ++i;
    });
    a=i;
    console.log(item)
    return item;
    
  });
 
  
}//=====================================================CRUD INVENTARIO END=============================================//


 
cargarDatos() 
function Inventario() {
  
  const [show, setShow] = useState(false);
  const [nombre, setNombre] = useState(false);
  const [descripcion, setDescripcion] = useState(false);
  const [precio, setPrecio] = useState(false);
  const handleClose = () => setShow(false);
  const handleShow = () => setShow(true);
    return (
      <div className="inventario">
          inventario
          <div className="Barra2">              fecha</div>
          <div className="container-i" id="tabla">
            <div className="item"> ID</div>
            <div className="item"> nombre </div>
            <div className="item"> descripcion </div>
            <div className="item"> precio</div>
            <div className="item"> </div>
            {item}
            
            
          </div>
          <Button value={a} className="button" variant="primary" onClick={(e)=>{handleShow();}}>Agregar Producto</Button>
          <Link to="/inventario" className='button'>RecargarInicio</Link>

          <Modal  show={show} onHide={handleClose}>
          <Modal.Header closeButton>
          <Modal.Title>Modal heading</Modal.Title>
          </Modal.Header>
          <Modal.Body className="container-Modal">
            nombre<input type="text" onChange={(e)=>{setNombre(e.target.value)}}></input>
            descripcion<input type="text" onChange={(e)=>{setDescripcion(e.target.value)}}></input>
            precio<input type="text" onChange={(e)=>{setPrecio(e.target.value)}}></input>
          </Modal.Body>
          <Modal.Footer>
          <Button variant="secondary" onClick={handleClose}>
            cerrar
          </Button>
          <Button variant="primary" onClick={()=>{Agregar(nombre, descripcion, precio);handleClose()}}>
            Guardar
          </Button>
          </Modal.Footer>
          </Modal>
      </div>
    );
  }
  
  export default Inventario;



  --------------------------------------------------------------ARREGLANDO MI DESASTRE--------------------------------------------------------------
Mi nombre es Junior Rafael Aquino De Leon 
hace tiempo hice una prueba tecnica que al faltarme experiencia con react, algunas cosas la inplemente de manera erronea 
este es el caso de useEffect

useEffect, para mi era un hook que era capaz de renderizar el componente, cada cierto tiempo pero no es asi 

useEffect, es un componente que se encargar de realizar una accion de renderizado, cuando pase cierto evento

esta vez voy arreglar con inventario

si ven dura 1 segundo para renderizarlo, y no deberia ser el caso 

lo primero es meter todas las funciones externas dentro del componente

y asi se solucina el problema 

keys, cada etiqueta de un arreglo debe tener una llave , es una buena practica

vamos hacer que renderice despues de eliminar,actualizar y agregar un producto

---------------


Facturacion 
cliente| empleado               fecha
id|producto| cantidad | monto 
total 
Cliente 
id|nombre|apellido        editar| borrar
Empleado 
id|nombre|apellido        editar| borrar
Inventario 
id|nombre|descripcion|precio editar| borrar
NOTA
{
  vamos a poner el modelo mas simple 
  vamos hacer que el proceso de cargar los productos, no sea persistente 
  y si lo hacemos persistente sera con local storage

  asi no necesitriamos tener un detalle factura , o si..
  un cliente tiene una o mas factura 
  una factura puede tener uno o mas cliente 
  cliente y factura seria una relacion de muchos a muchos 
  no tendria sentido, pero a mi lo que me interesa serian los datos 
  por eso obviare el modelo entidad relacion y me enfocare en un momento noSQL 
  pero esta vez para no complicarnos mucho los datos que me interesan son:
   

  //pero..
  vamos a hacerlo por entidad relacion el chico era re indeciso jaja
  tengo mi tabla factura 
  ID fACTURA| NOMBRE CLIENTE | NOMBRE EMPLEADO|  sub total 
  y mi detalle factura 
  id | [lista producto] | [lista cantidad] | [lista precio] |

  ../Relacionar Factura con DetallesfACTURA

  Esta es la logica que usare 

  Tabla factura tiene 
  pk_Factura

  Tabla factura tiene 
  pk_DetalleFactura 
  Fk_Factura

  mi idea es insertar los datos si fk_Factura=pk_Factura

  para esto tendremos que cargar los datos de detalles factura si fk_factura=pk factura 
  pero para obtener el valor de pk factura, tendremos que cargar llos datos de factura
}
Buenas haremos dos sencillos procedimientos 


daremos una optimizacion al codigo 
-lo primero es meter todos los metodos adentro de la funcion (LISTO)
-vamos a cargar datos no con un push sino de la manera que lo hemos estado haciendo(LISTO)
-vamos a crear nuestra tabla factura(Listo)
-vamos a crear nuestro proceso de facturacion(Listo)
crearemos la funcionalidad.

el proceso de facturacion ya funciona 

una vez que creo la facturacion procedemos a la siguiente factura y se me limpia el panel


ya para el proximo video trabajamos para vizualizar la factura

Vamos a iniciar 

vamos a comprobar que los datos se estan enviando(LISTO)

pero porque no se agregan a la base de datos, SE ESTABA AGREGANDO SOLO QUE ERA EN OTRA TABLA 

ya el sistema de facturacion esta creado , solo la logica

ahora hay que pulirlo 

ojo 

al hacer un proyecto no lo hagan y despues lo pulan eso es una mala practica

es mmejor comenzar bien y terminar bien asi hay menos que pulir 

lo supe ahora, y mi objetivo sera repetir menos esa mala practica
espero le haya gustado 